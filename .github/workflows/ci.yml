name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt -r requirements-dev.txt
          pip install pytest-qt>=4.2.0

          # Install dos2unix for line ending conversions
          if [ "$RUNNER_OS" = "Linux" ]; then
            sudo apt-get install -y dos2unix
          elif [ "$RUNNER_OS" = "macOS" ]; then
            brew install dos2unix
          fi

          # Make sure we have the correct PyQt6 versions
          pip list | grep -E 'PyQt6|pytest-qt'

      - name: Format check with Black
        run: |
          # Set line ending style to LF for GitHub Actions
          git config --global core.autocrlf input

          # Normalize line endings for Python files
          if [ "$RUNNER_OS" = "Linux" ] || [ "$RUNNER_OS" = "macOS" ]; then
            find . -name "*.py" -type f -exec dos2unix {} \;
          fi

          # Apply black formatting to problematic file first
          black tests/conftest.py

          # Then check all files
          black --check --target-version=py310 --line-length=88 .

      - name: Lint with Ruff
        run: ruff check .

      - name: Type check with Mypy
        run: mypy .

      - name: Security check with Bandit
        run: bandit -r . -ll -x launcher.py

      - name: Install Qt dependencies (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxkbcommon-x11-0 libxcb-xinerama0 libegl1 libgl1 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xkb1 libxkbcommon-x11-0 libgl-dev libegl1 libxkbcommon-dev xvfb

      # Start MongoDB service for Linux (using container action)
      - name: Start MongoDB (Linux)
        if: runner.os == 'Linux'
        uses: supercharge/mongodb-github-action@v1
        with:
          mongodb-version: "6.0"

      # Start MongoDB for macOS using Homebrew
      - name: Start MongoDB (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew tap mongodb/brew
          brew install mongodb-community@6.0
          brew services start mongodb-community@6.0

      # Start MongoDB for Windows using zip archive (fix Start-Process params)
      - name: Start MongoDB (Windows)
        if: runner.os == 'Windows'
        run: |
          $mongoVersion = '6.0.5'
          $mongoUrl = "https://fastdl.mongodb.org/windows/mongodb-windows-x86_64-$mongoVersion.zip"
          $maxRetries = 5
          $retry = 0
          while ($retry -lt $maxRetries) {
            try {
              curl.exe -L -o mongo.zip $mongoUrl
              if (Test-Path mongo.zip) { break }
            } catch {
              Write-Host "Download attempt $($retry+1) failed."
            }
            Start-Sleep -Seconds 5
            $retry++
          }
          if (!(Test-Path mongo.zip)) { Write-Error 'MongoDB zip download failed after retries.'; exit 1 }
          $extractPath = "$PWD\mongodb"
          Expand-Archive -Path mongo.zip -DestinationPath $extractPath
          $mongoDir = Get-ChildItem -Directory -Path $extractPath -Recurse | Where-Object { $_.Name -like "mongodb-win32-x86_64-windows-*" } | Select-Object -First 1
          if (-not $mongoDir) { Write-Error 'MongoDB directory not found after extraction.'; exit 1 }
          $mongoBin = Join-Path $mongoDir.FullName 'bin'
          $mongod = Join-Path $mongoBin 'mongod.exe'
          if (-not (Test-Path $mongod)) { Write-Error "mongod.exe not found at $mongod"; exit 1 }
          $env:PATH += ";$mongoBin"
          New-Item -ItemType Directory -Force -Path C:\data\db | Out-Null
          New-Item -ItemType Directory -Force -Path C:\data\log | Out-Null
          Start-Process -FilePath $mongod -ArgumentList "--dbpath=C:\data\db --logpath=C:\data\log\mongod.log --logappend --bind_ip=127.0.0.1" -WindowStyle Hidden
          $maxWait = 30
          $waited = 0
          while ($waited -lt $maxWait) {
            try {
              $tcp = New-Object System.Net.Sockets.TcpClient
              $tcp.Connect('localhost', 27017)
              $tcp.Close()
              Write-Host 'MongoDB is up!'
              break
            } catch {
              Start-Sleep -Seconds 1
              $waited++
            }
          }
          if ($waited -eq $maxWait) { Write-Error 'MongoDB did not start in time.'; exit 1 }
        shell: pwsh

      - name: Test with pytest
        run: |
          if [ "$RUNNER_OS" = "Linux" ]; then
            export QT_QPA_PLATFORM=offscreen
            export PYTEST_QT_API=pyqt6
            export XDG_RUNTIME_DIR=/tmp/runtime-runner
            mkdir -p $XDG_RUNTIME_DIR
            chmod 700 $XDG_RUNTIME_DIR
            export DISPLAY=:99
            # Print debug information
            python -c "from PyQt6.QtCore import QT_VERSION_STR; print(f'Qt version: {QT_VERSION_STR}')"
            python -c "import sys; print(f'Python version: {sys.version}')"
            # Run tests with xvfb
            xvfb-run -a --server-args="-screen 0 1280x800x24" pytest -v --cov=. --cov-report=xml -xvs
          else
            export PYTEST_QT_API=pyqt6
            pytest -v --cov=. --cov-report=xml
          fi
        shell: bash

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build package
        run: python -m build

      - name: Upload artifacts
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
